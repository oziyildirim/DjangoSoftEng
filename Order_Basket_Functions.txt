
İçindekiler:

	1-) Basketuse Guide - url:"127.0.0.1:8000/basket/<int:id>/" 		(<int:id> = user_id)
	2-) Address Guide - url:"127.0.0.1:8000/address/"	NOTE!= CHECK HOMEURLS FOR MORE INFO
	3-) Orderuse Guide - url:"127.0.0.1:8000/ord/"
	4-) getOrder Guide - url:"127.0.0.1:8000/ord/<int:id>/"			(<int:id> = user_id)
	5-) getOrderItem Guide - url:"127.0.0.1:8000/orditem/<int:id>/" 	(<int:id> = order_id)
	6-) Orderitem StatusChange Guide - url:"127.0.0.1:8000/status/"						#Sales Manager function
	7-) OrderAddressChange Guide - url:"127.0.0.1:8000/oac/"						#Sales Manager function
	8-) Favourites Guide - url:"127.0.0.1:8000/favs/<int:id>"		(<ind:id> = user id)
    9-) Payment Guide - url:"127.0.0.1:8000/pay/"
________________________________________________________________________________________________________________________________________________________

1-) Basketuse Guide

use url: "127.0.0.1:8000/basket/<int:id>/" (<int:id> = user_id)
with get, post and delete methods.


1.1- GET Method: Returns basketitems belongs to user specified in url.

1.1.1- Response for GET:

 - If everything goes well, HTTP-202-ACCEPTED will be returned with product info which are;
{
	"product_id": ,
        "product_name": "",
        "price": ,
        "description": "",
        "stock": ,
        "real_stock": ,
        "img": "",
        "rating": ,
        "brand_name": "",
        "recommended": false,
        "user": ,
        "quantity": 
}

 - If user does not exist or JSON format is incorrect, HTTP-404-NOT-FOUND will be returned.


1.2- POST Method: Adds product with specified amount to basket and also updates quantity, product_id is sent as product.

NOTE: QUANTITY IS SET AS DEFAULT = 1. TO CREATE BASKETITEM, YOU DO NOT HAVE TO SEND QUANTITY AND IT WILL AUTOMATICALLY SET TO 1.

NOTE!!: Use user_id 0 for shopping without login.

Body of POST 
{
    "product": ,
    "quantity":
}

1.2.1- Response for POST:

 - If basketitem is to be created and succesful, HTTP-201-CREATED will be given and basketitem will be returned as;
{
    "user": ,
    "user_exists":      # It is 'True' if user is a logged in user, 'False' if user is not logged in. 
}

 - If basketitem exists but quantity is changed, HTTP-200-OK will be given and "quantity updated" will be returned.

 - If inputed quantity does not exist in stock, HTTP-406-NOT-ACCEPTABLE will be given and "stock is not enough" wil be returned.

 - If JSON format is incorrect, HTTP-400-BAD-REQUEST will be returned.

1.3- DELETE Method: Deletes product from basket.

Body for delete 
{
    "product":
}

1.3.1- Response for DELETE:

 - If everything goes well, HTTP-204-NO-CONTENT will be returned.

 - If basketitem does not exist or JSON format is incorrect, HTTP-404-NOT-FOUND will be returned.

________________________________________________________________________________________________________________________________________________________


2-) Address Guide		NOTE: TO USE ORDER, IF NEW ADDRESS IS INPUTTED, ADDRESS NEEDS TO BE SEND BEFORE ORDER. ADDRESS ID IS NEEDED.

use url: "127.0.0.1:8000/address/". This url is also in homepage urls, "127.0.0.1:8000"
with get, post, put, delete methods.


2.1- POST Method: Creates address and returns its values and also address_id, ***WHICH WILL BE USED FOR ORDER. IMPORTANT!!!!!***

Body of POST 
{
    "first_name": 
    "last_name": 
    "city": 
    "state": 
    "postal_code": 
    "country": 
    "address_line": 
    "phone_number": 
    "user":         # user_id is sent here
}


2.1.1- Request for POST:

 - If everything goes well, HTTP-201-CREATED will be returned with address data;
{
    "address_id": ,
    "first_name": "",
    "last_name": "",
    "city": "",
    "state": "",
    "postal_code": ,
    "country": "",
    "address_line": "",
    "phone_number": "",
    "user": 
}

 - If JSON format is incorrect, HTTP-400-BAD-REQUEST will be returned with detailed info.


2.2- PUT Method: To update an existing address, need to use url "127.0.0.1:8000/address/id" id=address_id

NOTE: Existing data needs to be sent as well with changed data. Ask me if this is not clear.

Body of PUT, 

{
    "address_id":
    "first_name": 
    "last_name": 
    "city": 
    "state": 
    "postal_code": 
    "country": 
    "address_line": 
    "phone_number": 
    "user":         # user_id is sent here
}


2.2.1- Response for PUT:

 - If everything goes well, HTTP-200-OK will be returned with address data;
{
    "address_id": ,
    "first_name": "",
    "last_name": "",
    "city": "",
    "state": "",
    "postal_code": ,
    "country": "",
    "address_line": "",
    "phone_number": "",
    "user": 
}

 - If JSON format is incorrect, HTTP-400-BAD-REQUEST will be returned with detailed info.


2.3- DELETE Method: Need to use url "127.0.0.1:8000/address/id" id=address_id, to delete an address


2.3.1- Response for DELETE:

 - If everything goes well, HTTP-204-NO-CONTENT will be returned.

 - If basketitem does not exist or JSON format is incorrect, HTTP-404-NOT-FOUND will be returned.

________________________________________________________________________________________________________________________________________________________



3-) Orderuse Guide

use url: "127.0.0.1:8000/ord/" with post method. To use this url, if new address is added YOU SHOULD CREATE ADDRESS FIRST.
Then call this url. 
What does it do?: This function gets basketitems, transforms them into orderitems, delete quantity from stock and returns order data.
NOTE: YOU SHOULD NOT ALLOW USER TO ORDER WITHOUT ANY BASKETITEM.


3.1- POST Method: Creates order and automatically get items from basket.

Body for POST 
{
    "user":
    "address":
    "total_price":      #for now, frontend should calculate total_price and send it, may be changed later. REMIND ME WHEN YOU GET HERE.
}


3.1.1- Response for POST:

 - If everything goes well, HTTP-201-CREATED will be returned with order data;
{
    "order_id": ,
    "date": "",
    "total_price": ,
    "user": ,
    "address": 
}

 - If JSON format is incorrect, HTTP-400-BAD-REQUEST will be returned with detailed info.

________________________________________________________________________________________________________________________________________________________


4-) getOrder Guide

use url:"127.0.0.1:8000/ord/<int:id>/"  (<int:id> = user_id)
with GET method.

What does it do?: It returns order data. order_id is needed to get orderitems 
with function getOrderItem which is right below.


4.1- GET Method

4.1.1- Response for GET:

 - If everything goes well, HTTP-202-ACCEPTED will be returned with order data;
{
    "order_id": ,
    "date": "",
    "total_price": null,
    "user": null,
    "address": null
}

 - If order does not exist or JSON format is incorrect, HTTP-404-NOT-FOUND will be returned.

________________________________________________________________________________________________________________________________________________________


5-) getOrderItem Guide

use url:"127.0.0.1:8000/orditem/<int:id>/" 	(<int:id> = order_id)
with GET method.


5.1- GET Method

5.1.1- Response for GET:

 - If everything goes well, HTTP-200-OK will be returned with quantity, status and product datas as array;
[
    {
        "product_id": ,
        "product_name": "",
        "price": ,
        "description": "",
        "stock": ,
        "real_stock": ,
        "img": "",
        "rating": ,
        "brand_name": "",
        "recommended": ,
        "user": ,
        "quantity": ,
        "status": ""
    },

    {
        "product_id": ,
        "product_name": "",
        "price": ,
        "description": "",
        "stock": ,
        "real_stock": ,
        "img": "",
        "rating": ,
        "brand_name": "",
        "recommended": ,
        "user": ,
        "quantity": ,
        "status": ""
    },
    ....
]

 - If order does not exist or JSON format is incorrect, HTTP-404-NOT-FOUND will be returned.

________________________________________________________________________________________________________________________________________________________

6-) Orderitem status Change Guide or orderStatus Guide for Sales Manager

use url: "127.0.0.1:8000/status/" with post method.

NOTE: STATUS NEED TO BE SEND AS BELOW ON MAP; FOR GETTING PREPARED, SEND INTEGER 0.


6.1- POST Method: Send order_id as order, product_id as product and for status send INTEGER as 0,1,2.

Body of POST 
{
    "order":"",
    "product":"",
    "status": (send integer, map is below.)
}

Status Map = { 0:"Getting Prepared", 1:"On Delivery", 2:"Delivered", 3:"Cancelled"}


6.1.1- Response for POST:

- If everything goes well, HTTP-200-OK will be returned with orderitem data;
{
    "order_item_id": ,
    "status": "On Delivery",	# Response will return status as text
    "quantity": ,
    "order": ,
    "product": 
}

- If JSON format is incorrect, HTTP-400-BAD-REQUEST will be returned with detailed info.

________________________________________________________________________________________________________________________________________________________


7-) Orderaddresschange Guide					# GET and PUT for Sales Manager, POST is for Customer to create and address change request

use url: "127.0.0.1:8000/oac/" with GET and POST methods.


7.1- GET Method: Retrieves any request for address change.							# Sales Manager Function

7.1.1- Response for GET:

 - If everything goes well, HTTP-200-OK will be returned with an array of OAC that are not verified (orderaddresschange);
[
    {
        "orderadresschange_id": 2,
        "verified": false,
        "order": 13,
        "address": 7
    }
]

 - If not, HTTP-404-NOT-FOUND will be returned.

____________

7.2- POST Method: SAME RULE IS VALID AS ORDER. IF NEW ADDRESS WILL BE USED, POST ADDRESS FIRST THEN USE ADDRESS_ID.			# Customer Function

*****
What does it do?: For Customer to add request of an address change.

*****

Body of POST
{
    "order_id":13,
    "address_id":7              #send new address_id wanted to be assigned. talk with me for more info below.
}

Note: 
Eğer varolan adres değiştirilmek isteniyorsa routerdaki adres kullanılabilir put metodu ile.
Database den farklı bir adres seçilecek ise bu url direkt kullanılabilir.
Eğer yeni bir adres eklenecek ise routerdaki adresten yeni adres eklenip address_id orderaddresste kullanılır


7.2.1- Response for POST:

 - If everything goes well, HTTP-200-OK will be returned with orderaddresschange data;
{
    "orderadresschange_id": 2,
    "verified": false,
    "order": 13,
    "address": 7
}

 - If JSON format is incorrect or address does not exist, HTTP-400-BAD-REQUEST will be returned with detailed info

____________


7.3- PUT Method: To approve change of address in order, just send id of orderaddresschange which is orderaddresschange_id as "oac_id"		# Sales Manager Function
*****
What does it do?: Changes the address of order and changes orderaddresschange->verified to True.

*****

Body of PUT:
{
	"oac_id":2
}

7.3.1- Response for PUT:

- If everything goes well, HTTP-202-ACCEPTED will be returned.

- If not, HTTP-404-NOT-FOUND will be returned.


________________________________________________________________________________________________________________________________________________________


8-) Favourites Guide:

use url: "127.0.0.1:8000/favs/<int:id>"  (<int:id> is for user_id)
with GET, POST, DELETE methods


8.1- GET method: Will return all objects of user specified in url.
For example: If user id is 43, "127.0.0.1:8000/favs/43/"


8.1.1- Response for GET:

 - If everything goes well, HTTP-202-ACCEPTED will be returned with product data as array;
[
    {
        "product_id": ,
        "product_name": "",
        "price": ,
        "description": "",
        "stock": ,
        "real_stock": ,
        "img": "",
        "rating": ,
        "brand_name": "",
        "recommended": ,
        "user": 
    },
    {
        "product_id": ,
        "product_name": "",
        "price": ,
        "description": "",
        "stock": ,
        "real_stock": ,
        "img": "",
        "rating": ,
        "brand_name": "",
        "recommended": ,
        "user": 
    },
    ...
]

 - If JSON format is incorrect, HTTP-404-NOT-FOUND will be returned.
___

8.2- POST Method

Body of POST
{
    "product":""    # send product_id as product
}

8.2.1- Response for POST:

 - If everything goes well, HTTP-201-CREATED will be returned with favourite data;
{
    "id": ,
    "user": "",
    "product":  
}

 - If product already exist as favourite, HTTP-406-NOT-ACCEPTABLE will be given and
"already exists" will be returned.

 - If JSON format is incorrect, HTTP-400-BAD-REQUEST will be returned with detailed info.

___

8.3- DELETE Method

Body of post:
{
    "product":""
}

8.3.1- Response for DELETE:

 - If everything goes well, HTTP-204-NO-CONTENT will be returned.

 - If favourite does not exist or JSON format is incorrect, HTTP-404-NOT-FOUND will be returned.

________________________________________________________________________________________________________________________________________________________


9-) Payment Guide: Does nothing, just checks if every data is sent.

use url: "127.0.0.1:8000/pay/" 						
with POST method.


9.1- POST Method

Body of POST:
{
    "credit_card_number": "", 
    "cvv":"", 
    "expiration_date":"", 
    "name":""
}

9.1.1- Response for POST:

- If everything goes well, HTTP-200-OK will be returned with message "Payment made".

- If not, HTTP-400-BAD-REQUEST will be returned with message "Missing info.".





